目录
  作用域和闭包
  原型链
  对象的属性
  表达式和运算符

作用域和闭包
作用域
  作用域是一套规则，用于确定在何处以及如何查找变量（标识符）。
  如果查找的目的是对变量进行赋值，那么就会使用LHS 查询；如果目的是获取变量的值，就会使用RHS 查询。
  词法作用域是在写代码或者说定义时确定的，关注函数在何处声明。
  动态作用于是在运行时确定的（this也是），关注函数从何处调用。
词法作用域
  JavaScript中的作用域是词法作用域，（with，eval()除外）
  作用域：块作用域和函数作用域
  只有with,try/catch,let,const关联的变量存在块作用域
闭包
  当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。
  let fun1,fun2;
  function fun3 (){
    let a = 'wow';
    function fun4 (){
      return a;
    }
    fun1 = fun4;
    return fun4;
  }
  fun2 = fun3();
  fun1();//'wow'
  fun2();//'wow'
模块
  模块是一个 对象（从包装函数调用返回的，拥有闭包函数）或闭包函数（从包装函数调用返回的）
  模块有两个主要特征：
  1为创建内部作用域而调用了一个包装函数；
  2包装函数的返回值必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭包。
  bar.js
    function hello(who) {
    return "Let me introduce: " + who;
    }
    export hello;
  foo.js
    // 仅从"bar" 模块导入hello()
    import hello from "bar";
    var hungry = "hippo";
    function awesome() {
      console.log( hello( hungry ).toUpperCase() );
    }
    export awesome;
  baz.js
    // 导入完整的"foo" 和"bar" 模块作用域闭包
    module foo from "foo";
    module bar from "bar";
    console.log( bar.hello( "rhino" ) ); // Let me introduce: rhino
    foo.awesome(); // LET ME INTRODUCE: HIPPO




其他
  函数声明和函数表达式的区别
  函数声明会将标识符绑定到声明所在作用域，函数表达式会将标识符绑定到自身函数作用域内。
  函数声明不能匿名，函数表达式可以匿名
  函数声明会被提升，函数表达式不会被提升

this
分析调用栈，找出函数的调用位置
箭头函数的this指向 调用箭头函数的this指向的对象
  1.new绑定，this指向新创建的对象
    new Fun()
  2.显式绑定，this指向显式绑定的对象，如果绑定到undefined或null则应用默认绑定
    fun.call(obj),fun.apply(obj)
    fun.bind(obj)
    许多支持从参数中指定this的内置函数
  3.隐式绑定,this指向调用此函数的上下文对象
    obj.fun()
    直接调用执行 对象的方法:
  4.默认绑定，this严格模式下指向undefined,非严格模式下指向window
    fun();
  方法，对象中的函数属性

对象
null 和undefined 没有对应的构造形式，它们只有文字形式。相反，Date 只有构造，没有文字形式。
对于Object、Array、Function 和RegExp（正则表达式）来说，无论使用文字形式还是构造形式，它们都是对象，不是字面量

原型链
  设置原型
    Object.setPrototypeOf(obj1,obj)     将obj1的[[prototype]]设为obj，性能低下，建议用Object.create()方法代替
    obj1 = Object.create(obj)           创建一个以obj为原型的对象赋给obj1
    obj = new Obj()    创建一个新对象，将其原型链接到Obj.prototype，将其绑定到函数调用的this并执行，返回函数返回的对象或那个新对象

  判断原型
    obj.isPrototypeOf(obj1)      判断obj是否在obj1的原型链上
    obj instanceof Obj           判断Obj.prototype是否在obj的原型链中

  obj的[[prototype]]：
    Object.getPrototypeOf(obj)
    obj.__proto__
    Obj.prototype      在Obj函数创建时，即被创建

  图示
    图示一
    var obj= {};即var obj= new Object()

    function Obj(){};
    var obj=new Obj();    Obj                       Object------...
    |                      ↑|                         ↑|
    |           constructor||prototype     constructor||prototype
    |                      |↓                         |↓
    | obj------------->Obj.prototype------------->Object.prototype------------->null        <--obj的原型链
    |    [[prototype]]              [[prototype]]                  [[prototype]]
    图示二
    var obj={};
    var obj1=Object.create(obj);                             Object-------Function.prototype-------Object.prototype-------null
    var obj2=Object.create(obj1);                    Object.prototype.constructor
    |                                                           |
    |          obj2的[[prototype]]  obj1的[[prototype]]  obj的[[prototype]]  Object.prototype的[[prototype]]
    |  obj2-------------obj1-------------obj-------------Object.prototype-----------------null        <--obj2的原型链

对象的属性
  属性的描述符，特性，配置
    数据描述符：[[Value]],[[Writable]]
    访问器描述符：[[Get]],[[Set]]
    通用描述符：[[Configurable]],[[Enumberable]]
    数据描述符和访问器描述符无法同时存在，设置描述符时需使用小写字符串，访问器属性可以没有[[Set]]
    即便属性是configurable:false， 我们还是可以把writable 的状态由true 改为false，但是无法由false 改为true。configurable:false 还会禁止删除这个属性
    [[Put]] 被触发时，实际的行为取决于许多因素，包括对象中是否已经存在这个属性（这是最重要的因素）。
      如果已经存在这个属性，[[Put]] 算法大致会检查下面这些内容。
      1. 属性是否是访问描述符（参见3.3.9 节）？如果是并且存在setter 就调用setter。
      2. 属性的数据描述符中writable 是否是false ？如果是，在非严格模式下静默失败，在严格模式下抛出TypeError 异常。
      3. 如果都不是，将该值设置为属性的值。
  不变性
    1.设置writable:false 和configurable:false，不可修改、重定义或者删除
    2.Object.preventExtensions(obj)，禁止obj添加新属性,保留已有属性
    3.Object.seal(obj),调用Object.preventExtensions(obj),并把所有现有属性标记为configurable:false
    4.Object.freeze(obj),调用Object.seal(obj),并把所有“数据访问”属性标记为writable:false，
  属性及其配置相关方法
    Object.defineProperty({},'',{})      添加一个属性或修改属性的配置
    Object.defineProperties({},{})      添加多个属性或修改属性的配置
    
    Object.getOwnPropertyDescriptor({},'')      返回指定自身属性的配置:{}
  返回属性列表
    Object.entries()       自身可枚举属性的名称和值:[[key,value],...]
    Object.keys()      自身可枚举属性的名称:['',...]
    Object.values()      自身可枚举属性的值:[]

    Object.getOwnPropertyNames()       自身属性的名称:['',...]（包括不可枚举，不包括Symbol属性）
    Object.getOwnPropertySymbols()       自身Symbol属性:[]
  判断指定属性是否是：
    obj.hasOwnProperty()      自身属性
    obj.propertyIsEnumerable()      自身可枚举属性
    
    property in obj      判断obj及其原型链自身可枚举属性中是否存在property属性
  for...in...,for...of...

异步
  程序中现在运行的部分和将来运行的部分之间的关系就是异步编程的核心
  浏览器在后台异步处理控制台I/O 能够提高性能
  如果在调试的过程中遇到对象在console.log(..) 语句之后被修改，可你却看到了意料之外的结果，要意识到这可能是这种I/O 的异步化造成的。
  异步是关于现在和将来的时间间隙，而并行是关于能够同时发生的事情。
表达式和运算符
主要表达式，JavaScript中基本关键字和常用表达式。
  this      this 关键字指向函数的执行上下文。
  function      function 关键字定义了函数表达式。
  class      class 关键字定义了类表达式。
  function*      function* 关键字定义了一个 generator 函数表达式。
  yield      暂停和恢复 generator 函数。
  yield*      委派给另外一个generator函数或可迭代的对象。
  async function*      async function 定义一个异步函数表达式。
  await      暂停或恢复执行异步函数，并等待promise的resolve/reject回调。
  []      数组初始化/字面量语法。
  {}      对象初始化/字面量语法。
  /ab+c/i      正则表达式字面量语法。
  ()      分组操作符。

左表达式，左边的值是赋值的目标。
  属性访问符      成员运算符提供了对对象的属性或方法的访问      (object.property 和 object["property"]).
  new      new 运算符创建了构造函数实例。
  new.target      在构造器中，new.target 指向new调用的构造器。
  super      super 关键字调用父类的构造器.
  ...obj      展开运算符可以将一个可迭代的对象在函数调用的位置展开成为多个参数,或者在数组字面量中展开成多个数组元素。

自增和自减，前置/后置自增运算符和前置/后置自减运算符.
  A++      后置自增运算符.
  A--      后置自减运算符.
  ++A      前置自增运算符.
  --A      前置自减运算符.

一元运算符，只有一个操作数.
  delete      delete 运算符用来删除对象的属性.
  void      void 运算符表示表达式放弃返回值.
  typeof      typeof 运算符用来判断给定对象的类型.
  +      一元加运算符将操作转换为Number类型.
  -      一元减运算符将操作转换为Number类型并取反.
  ~      按位非运算符.
  !      逻辑非运算符.

算术运算符，以二个数值（字面量或变量）作为操作数，并返回单个数值。
  +,-,/,*,%,**      加法，减法，除法，乘法，取余，求幂 运算符

关系运算符，比较二个操作数并返回基于比较结果的Boolean值。
  in      in运算符用来判断对象是否拥有给定属性.
  instanceof      instanceof 运算符判断一个对象是否是另一个对象的实例.
  <      小于运算符
  >      大于运算符.
  <=      小于等于运算符.
  >=      大于等于运算符。 

相等运算符，如果相等，操作符返回的是Boolean(布尔)类型的true，否则是false。
  ==      相等 运算符.
  !=      不等 运算符.
  ===      全等 运算符.
  !==      非全等 运算符.

位移运算符，在二进制的基础上对数字进行移动操作
  <<      按位左移运算符。
  >>      按位右移运算符。
  >>>      按位无符号右移运算符。

二进制位运算符，将它们的操作数作为32个二进制位（0或1）的集合，并返回标准的JavaScript数值。
  &      二进制位与（AND）。
  |      二进制位或（OR）。
  ^      二进制位异或（XOR）。

二元逻辑运算符，典型的用法是用于boolean(逻辑)值运算, 它们返回boolean值。
  &&      逻辑与.
  ||      逻辑或.

条件(三元)运算符
  (condition ? ifTrue : ifFalse)     条件元素运算符把两个结果中其中一个符合运算逻辑的值返回。

赋值运算符，将右边的操作数的值分配给左边的操作数，并将其值修改为右边操作数相等的值。
  =,*=,/=,%=,+=,-=      赋值运算符，赋值乘积，赋值商，赋值求余，赋值求和，赋值求差
  <<=,>>=,>>>=,&=,^=,|=      左位移，右位移，无符号右位移，赋值与，赋值按位异或，赋值或
  [a, b] = [1, 2]
  {a, b} = {a:1, b:2}      解构赋值允许你分配数组或者对象变量的属性通过使用规定的语法，其看起来和数组和对象字面量很相似。
  
逗号操作符
  ,      逗号操作符允许在一个判断状态中有多个表达式去进行运算并且最后返回最后一个表达式的值。



参考：
  你不知道的JavaScript：https://github.com/getify/You-Dont-Know-JS
  https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators