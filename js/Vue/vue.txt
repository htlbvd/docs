
<div id="app">
  {{ message }}                                              <!--此处会与app.message保持一致-->
  <span v-bind:title="message">文字</span>                   <!--此span元素的title特性会与app.message保持一致-->
  <p v-if="seen">文字</p>                                     <!--app.seen值为true时，此p元素显示-->
  <button v-on:click="reverseMessage">掉头</button>       <!--点击此按钮会执行reverseMessage-->
  <input v-model="message">                                   <!--此表单内容会与app.message保持一致-->
  <p>掉头以后是: "{{ reversedMessage }}"</p>
  <span v-once>不变：{{ message }}</span>
</div>

var app = new Vue({
  el: '#app',                          //el字符串的值应与对应html元素的id加上#一致
  data: {                              //data对象下的所有非_或&开头的属性都会成为app的属性，在这里定义数据
    message: 'Hello Vue!',
    seen: 'true'
  },
  methods: {                           //在这里定义函数（方法）
    reverseMessage: function () {
      this.message = this.message.split('').reverse().join('')        
    }
  }，
  computed: {                          //在这里定义计算属性，默认只有 getter ，不过在需要时你也可以提供一个 setter 
    // 计算属性的 getter
    reversedMessage: function () {
      // `this` 指向 vm 实例
      return this.message.split('').reverse().join('')；
    }
  }

})

当实例被创建时 data 中存在的属性才是响应式的

Object.freeze(对象)，这会阻止修改该对象的属性

使用 v-once 指令，能执行一次性地插值，当数据改变时，插值处的内容不会更新

输出真正的 HTML，你需要使用 v-html 指令：


v-bind:class
对象语法：
  <div v-bind:class="classObject"></div>

  data: {
    isActive: true,
    error: null
  },
  computed: {
    classObject: function () {
      return {
        active: this.isActive && !this.error,
        'text-danger': this.error && this.error.type === 'fatal'
      }
    }
  }
数组语法：


v-bind:style
对象语法：
  <div v-bind:style="styleObject"></div>

  data: {
    styleObject: {
      color: 'red',
      fontSize: '13px'
    }
  }


v-else 元素必须紧跟在带 v-if 或者 v-else-if 的元素的后面，否则它将不会被识别。

v-for="(item, index) in items"    （将数组的每个项赋给item，.......）
v-for="(value, key, index) in object"

数组更新检测

变异方法
  push(),pop(),shift(),unshift(),splice(),sort(),reverse()
替换数组
  filter(),concat(),slice()
检测不到的变动
  当你利用索引直接设置一个项时，例如：vm.items[indexOfItem] = newValue
    解决办法：
    // Vue.set
    Vue.set(vm.items, indexOfItem, newValue)
    或
    // Array.prototype.splice
    vm.items.splice(indexOfItem, 1, newValue)
  当你修改数组的长度时，例如：vm.items.length = newLength
    解决办法：
    vm.items.splice(newLength)

对象更改检测
Vue 不能检测对象属性的添加或删除
对于已经创建的实例，Vue 不能动态添加根级别的响应式属性。但是，可以使用 Vue.set(object, key, value) 方法向嵌套对象添加响应式属性。
有时你可能需要为已有对象赋予多个新属性，比如使用 Object.assign() 或 _.extend()。在这种情况下，你应该用两个对象的属性创建一个新的对象。
所以，如果你想添加新的响应式属性，不要像这样：
Object.assign(vm.userProfile, {
  age: 27,
  favoriteColor: 'Vue Green'
})
你应该这样做：
vm.userProfile = Object.assign({}, vm.userProfile, {
  age: 27,
  favoriteColor: 'Vue Green'
})


v-on:事件.修饰符="事件发生时要执行的表达式、语句或方法"


v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。
文本：字符串
多行文本：字符串
单个复选框：布尔值
多个复选框：同一个数组
单选按钮：字符串
选择框单选时：字符串
选择框多选时：数组
我们可能想把值绑定到 Vue 实例的一个动态属性上，这时可以用 v-bind 实现，并且这个属性的值可以不是字符串。
修饰符
.lazy
在默认情况下，v-model 在每次 input 事件触发后将输入框的值与数据进行同步 (除了上述输入法组合文字时)。你可以添加 lazy 修饰符，从而转变为使用 change 事件进行同步
.number
如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 number 修饰符
.trim
如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符



如果你想要将一个对象的所有属性都作为 prop 传入，你可以使用不带参数的 v-bind (取代 v-bind:prop-name)。

自定义事件名推荐始终使用 kebab-case
组件和prop命名