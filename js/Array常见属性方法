JavaScript的Array对象是用于构造数组的全局对象，数组是类似于列表的高阶对象。
方法
Array.from()  从类数组对象或者可迭代对象中创建一个新的数组实例。
Array.isArray() 用来判断某个变量是否是一个数组对象。
Array.of()  根据一组参数来创建新的数组实例，支持任意的参数数量和类型。


数组实例
所有的数组实例都会从Array.prototype集成属性和方法。修改Array的原型会影响到所有的数组实例。

Array.prototype.(...)
属性

constructor 所有的数组实例都继承了这个属性，它的值就是Array。
length  Array.prototype也是个数组，所以它也有length属性，其值为0，因为它是个空数组。

方法

修改器方法，这些方法会改变调用它们的对象自身的值：

copyWithin()*
fill()*
pop() 删除数组的最后一个元素，并返回这个元素。
push(元素1，...)  在数组的末尾增加一个或多个元素，并返回数组的新长度。
reverse() 颠倒数组中元素的排列顺序,并返回该数组。
shift() 删除数组的第一个元素，并返回这个元素。
sort([排序函数])  对数组元素进行排序，并返回当前数组。如果 排序函数(a, b) 小于 0 ，那么 a 会被排列到 b 之前。
splice()  
  语法
  array.splice(start[, deleteCount[, item1[, item2[, ...]]]])

  参数
  start​
      指定修改的开始位置（从0计数）。如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位（从-1计数）；如果负数的绝对值大于数组的长度，则表示开始位置为第0位。
  deleteCount 可选
      整数，表示要移除的数组元素的个数。
      如果 deleteCount 大于 start 之后的元素的总数，则从 start 后面的元素都将被删除（含第 start 位）。
      如果 deleteCount 被省略，则其相当于 array.length - start。
      If deleteCount is omitted, or if its value is equal to or larger than (that is, if it is equal to or greater than the number of elements left in the array, starting at start), then all of the elements from start through the end of the array will be deleted.
      如果 deleteCount 是 0 或者负数，则不移除元素。这种情况下，至少应添加一个新元素。
  item1, item2, ... 可选
      要添加进数组的元素,从start 位置开始。如果不指定，则 splice() 将只删除数组元素。

  返回由被删除的元素组成的一个数组。
unshift(元素1,...) 在数组的开头增加一个或多个元素，并返回数组的新长度。

访问方法，不会改变调用它们的对象的值
concat(数组或非数组,...)  返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。
includes()*
join()  连接所有数组元素组成一个字符串。
  语法
  arr.join([separator])
  参数
  separator
      指定一个字符串来分隔数组的每个元素。如果需要，将分隔符转换为字符串。如果省略()，数组元素用逗号分隔。默认为 ","。如果separator是空字符串("")，则所有元素之间都没有任何字符。
  返回 一个所有数组元素连接的字符串。如果 arr.length 为0，则返回空字符串。
slice() 抽取当前数组中的一段元素组合成一个新数组。并返回该数组
  arr.slice();// [0, end]
  arr.slice(begin);// [begin, end]
  arr.slice(begin, end);// [begin, end)
toString()  连接数组并返回一个字符串，其中包含用逗号分隔的每个数组元素。
toLocaleString()
indexOf() 返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。
  语法
  arr.indexOf(searchElement)
  arr.indexOf(searchElement[, fromIndex = 0])
  参数
  searchElement
      要查找的元素
  fromIndex
      开始查找的位置。如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回-1。如果参数中提供的索引值是一个负值，则将其作为数组末尾的一个抵消，即-1表示从最后一个元素开始查找，-2表示从倒数第二个元素开始查找 ，以此类推。 注意：如果参数中提供的索引值是一个负值，并不改变其查找顺序，查找顺序仍然是从前向后查询数组。如果抵消后的索引值仍小于0，则整个数组都将会被查询。其默认值为0.
  返回首个被找到的元素在数组中的索引位置; 若没有找到则返回 -1
lastIndexOf() 返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。
  语法
  arr.lastIndexOf(searchElement[, fromIndex = arr.length - 1])

  参数
  searchElement
      被查找的元素。
  fromIndex
      从此位置开始逆向查找。默认为数组的长度减 1，即整个数组都被查找。如果该值大于或等于数组的长度，则整个数组会被查找。如果为负值，将其视为从数组末尾向前的偏移。即使该值为负，数组仍然会被从后向前查找。如果该值为负时，其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。
  返回数组中最后一个元素的索引，如未找到返回-1

迭代方法

  参数
    callback
      为数组中每个元素执行的函数，该函数被依次传入参数：

      数组当前项的值
      数组当前项的索引
      数组对象本身
    thisArg可选
        可选参数。当执行回调函数时用作 this 的值(参考对象)。
forEach() 为数组中的每个元素执行一次回调函数。
  语法
  arr.forEach(callback(element[, index[, array]])[, thisArg])
  返回undefined
  没有办法中止或者跳出 forEach() 循环，除了抛出一个异常。
entries()*  
every() 如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。
  arr.every(callback(element[, index[, array]])[, thisArg])
  every 方法为数组中的每个元素执行一次 callback 函数，直到它找到一个使 callback 返回 false（表示可转换为布尔值 false 的值）的元素。如果发现了一个这样的元素，every 方法将会立即返回 false。否则，callback 为每一个元素返回 true，every 就会返回 true。
some()  如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。
  arr.some(callback(element[, index[, array]])[, thisArg])
  some() 为数组中的每一个元素执行一次 callback 函数，直到找到一个使得 callback 返回一个“真值”（即可转换为布尔值 true 的值）。如果找到了这样一个值，some() 将会立即返回 true。否则，some() 返回 false。
filter()  将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回。
  arr.filter(callback(element[, index[, array]])[, thisArg])
find()*
findIndex()*
keys()*
map() 返回一个由回调函数的返回值组成的新数组。
  arr.map(callback(element[, index[, array]])[, thisArg])
reduce()  从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。
  语法
  arr.reduce(callback[, initialValue])

  参数
  callback
      执行数组中每个值的函数，包含四个参数：
      accumulator
          累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（见于下方）。
      currentValue
          数组中正在处理的元素。
      currentIndex可选
          数组中正在处理的当前元素的索引。 如果提供了initialValue，则起始索引号为0，否则为1。
      array可选
          调用reduce()的数组
  initialValue可选
      作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。 
  返回函数累计处理的结果
  回调函数第一次执行时，accumulator 和currentValue的取值有两种情况：如果调用reduce()时提供了initialValue，accumulator取值为initialValue，currentValue取数组中的第一个值；如果没有提供 initialValue，那么accumulator取数组中的第一个值，currentValue取数组中的第二个值。
reduceRight() 从右到左...
values()*



来源：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array

