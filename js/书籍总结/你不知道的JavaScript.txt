上卷
第一部分 作用域和闭包
  第2章 词法作用域
    2.1 词法阶段
    非全局的变量如果被遮蔽了，无论如何都无法被访问到
    函数的词法作用域只由函数被声明时所处的位置决定
    词法作用域只会查找一级标示符
    2.2 欺骗词法
    欺骗词法作用域会导致性能下降，都不推荐使用
    eval(..)函数可以接受一个字符串为参数
    严格模式中eval(..)在运行时有其自己的词法作用域，其中的声明无法修改所在的作用域
    with，在严格模式下被完全禁止
  第3章 函数作用域和块作用域
    3.1 函数中的作用域
    3.2 隐藏内部实现
    3.3 函数作用域
    3.4 块作用域
    3.4.1 with
    3.4.2 try/catch
    3.4.3 let
    垃圾收集
    let循环
    3.4 const
    声明常量
  第4章 提升
  第5章 作用域闭包
    5.2 实质问题
    闭包：当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。
      function foo(){
        var a = 2;
        function bar(){
          console.log(a);//2
        }
        bar();
      }
      foo();

      function foo(){
        var a = 2;
        function bar(){
          console.log(a);
        }
        return bar;
      }
      var baz = foo();
      baz();//2————————朋友，这就是闭包的效果。

      function foo(){
        var a = 2;
        function baz(){
          console.log(a);//2
        }
        bar(baz);
      }
      function bar(fn){
        fn();//妈妈快看呀，这就是闭包！
      }

      var fn;
      function foo(){
        var a = 2;
        function baz(){
          console.log(a);
        }
        fn = baz;
      }
      function bar(){
        fn();//妈妈快看呀，这就是闭包！
      }
      foo();
      bar();//2

    5.3 现在我懂了
      function wait(message){
        setTimeout(function timer(){
          console.log(message);
        },1000);
      }
      wait("Hello,closure!");
    5.4 循环和闭包
      for (var i=1;i<=5;i++){
        setTimeout(function timer(){
          console.log(i);
        },i*1000);
      }//每秒一次输出5个6

      for (var i=1;i<=5;i++){
        (function(){
          setTimeout(function timer(){
            console.log(i);
          },i*1000);
        })();
      }//同上

      for (var i=1;i<=5;i++){
        (function(){
          var j=i;
          setTimeout(function timer(){
            console.log(j);
          },j*1000);
        })();
      }//每秒一次输出1-5

      for (var i=1;i<=5;i++){
        let j=i;//是的，闭包的块作用域!
        setTimeout(function timer(){
          console.log(j);
        },j*1000);
      }//同上

      for (let i=1;i<=5;i++){
        setTimeout(function timer(){
          console.log(i);
        },i*1000);
      }

    5.5 模块
    模块模式需要具备两个必备条件。
    1.必须有外部的封闭函数，该函数必须至少被调用一次（每次调用都会创建一个新的模块实例）
    2.封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。
      function CoolModule(){
        var something = "cool";
        var another = [1,2,3];
        function doSomething(){
          console.log(something);
        }
        function doAnother(){
          console.log(another.join("!"))
        }
        return {
          doSomething: doSomething,
          doAnother: doAnother
        };
      }
      var foo = CoolModule();
      foo.doSomething();//cool
      foo.doAnother();//1!2!3

      var foo = (function CoolModule(){
        var something = "cool";
        var another = [1,2,3];
        function doSomething(){
          console.log(something);
        }
        function doAnother(){
          console.log(another.join("!"));
        }
        return {
          doSomething: doSomething,
          doAnother:doAnother
        };
      })();
      foo.doSomething();//cool
      foo.doAnother();1!2!3

      function CoolModule(id){
        function identify(){
          console.log(id);
        }
        return {
          identify:identify
        };
      }
      var foo1 = CoolModule("foo 1");
      var foo2 = CoolModule("foo 2");
      foo1.identify();//"foo 1"
      foo2.identify();//"foo 2"

      var foo = (function CoolModule(id){
        function change(){
          //修改公共API
          publicAPI.identify = identify2;
        }
        function identify1(){
          console.log(id);
        }
        function identify2(){
          console.log(id.toUpperCase());
        }
        var publicAPI = {
          change: change,
          identify: identify1
        };
        return publicAPI;
      })("foo module");
      foo.identify();//foo module
      foo.change();
      foo.identify();//FOO module

    5.5.1 现代的模块机制?????
      var MyModules = (function Manager(){
        var modules = {};
        function define(name,deps,impl){
          for (var i=0;i<deps.length;i++){
            deps[i] = modules[deps[i]];
          }
          modules[name] = impl.apply(impl,deps);
        }
        function get(name){
          return modules[name];
        }
        return {
          define:define;
          get:get
        };
      })();

      MyModules.define("bar",[],function(){
        function hello(who){
          return "Let me introduce:" + who;
        }
        return {
          hello: hello
        };
      });
      MyModules.define("foo",[],funtion(){
        var hungry = "hippo";
        function awesome(){
          console.log(bar.hello(hungry).toUpperCase());
        }
        return {
          awesome:awesome
        };
      });
      var bar = MyModules.get("bar");
      var foo = MyModules.get("foo");
      console.log(
        bar.hello("hippo")
      );//<i>Let me introduce:hippo</i>
      foo.awesome();//LET ME INTRODUCE:HIPPO

    5.5.2 未来的模块机制
      bar.js
      function hello(who){
        return "Lwt me introduce:" + who;
      }
      export hello;

      foo.js
      import hello from "bar";
      var hungry = "hippo";
      function awesome(){
        console.log(
          hello(hungry).toUpperCase()
        );
      }
      export awesome;

      baz.js
      //导入完整的"foo"和"bar"模块
      module foo from "foo";
      module bar from "bar";
      console.log(
        bar.helllo("rhino")
      );//Let me introduce: rhino
      foo.awesome();//LET ME INTRODUCE:HIPPO

    import可以将一个模块中的一个或多个API导入到当前作用域中，并分别绑定在一个变量上。
    module会将整个模块的API导入并绑定到一个变量上。
    export会将当前模块的一个标识符导出为公共API。

  附录A 动态作用域
  词法作用域是在写代码或者说定义时确定的，关注函数在何处声明。
  动态作用于是在运行时确定的（this也是），关注函数从何处调用。
  附录B 块作用域的替代方案
  附录C this用法
    var obj = {
      id:"awesome",
      cool:function coolFn(){
        console.log(this.id);
      }
    };
    var id = "not awesome"
    obj.cool();//酷
    setTimeout(obj.cool（）,100)//不酷

    var obj = {
      count:0,
      cool:function coolFn(){
        var self = this;
        if(self.count<1){
          setTimeout(function timer(){
            self.count++;
            console.log("awesome?");
          },1000);
        }
      }
    };
    obj.cool();//酷吧?

    var obj = {
      count: 0,
      cool: function coolFn(){
        if(this.count<1){
          setTimeout(()=>{//箭头函数什么鬼东西？
            this.count++;
            console.log("awesome?");
          },100);
        }
      }
    };
    obj.cool();//很酷吧？

    var obj = {
      count:0,
      cool:function coolFn(){
        if(this.count<1){
          setTimeout(function timer(){
            this.count++;//this是安全的因为bind(..)
            console.log("more awesome");
          }.bind(this),100);//look,bind()!
        }
      }
    };
    obj.cool();//更酷了

第二部分 this和对象原型
  第一章 关于this
    1.1 为什么要用this
      function identify(){
        return this.name.toUpperCase();
      }
      function speak(){
        var greeting = "Hello,I'm " + identify.call(this);
        console.log(greeting);
      }
      var me = {
        name: "Kyle"
      };
      var you = {
        name: "Reader"
      };
      identify.call(me);//KYLE
      identify.call(you);//READER
      speak.call(me);//KYLE,我是KYLE
      speak.call(you);//HELLO,我是READER

      //显式传递上下文对象
      function identify(context){
        return context.name.toUpperCase();
      }
      function speak(context){
        var greeting = "Hello,I'm " + identify(context);
        console.log(greeting);
      }
      identify(you);//READER
      speak(me);//Hello,我是KYLE
    相比显式传入一个上下文对象，this提供了一种更优雅的方式来隐式“传递”一个对象引用，因此可以将API设计得更加简洁并且易于复用。
    1.2 误解
    1.2.1 指向自身
    误解一：this指向函数本身
      function foo(num){
        console.log("foo:" + num);
        //记录foo被调用的次数
        this.count++;
      }
      foo.count = 0;
      var i;
      for (i=0;i<10;i++){
          if(i>5){
            foo(i);
        }
      }
      //foo:6
      //foo:7
      //foo:8
      //foo:9
      //foo被调用了多少次？
      console.log(foo.count);//0--WTF?

      //使用词法作用域
      function foo(num){
        console.log("foo: " + num);
        //记录foo被调用的次数
        data.count++;
      }
      var data = {
        count:0
      };
      var i;
      for (i=0;i<10;i++){
        if(i>5){
          foo(i);
        }
      }
      //foo:6
      //foo:7
      //foo:8
      //foo:9
      //foo被调用了几次
      console.log(data.count);//4

      //使用foo标识符替代this来引用函数对象
      function foo(num){
        console.log("foo: " + num );
        //记录foo被调用的次数
        foo.count++;
      }
      foo.count = 0;
      var i;
      for(i=0;i<10;i++){
        if(i>5){
          foo(i);
        }
      }
      //foo:6
      //foo:7
      //foo:8
      //foo:9
      //foo被调用了多少次？
      console.log(foo.count);//4

      //强制this指向foo函数对象
      function foo(num){
        console.log("foo: " + num);
        //记录foo被调用的次数
        //注意，在当前的调用方式下（参见下方代码），this确实指向foo
        this.count++;
      }
      foo.count = 0;
      var i;
      for(i=0;i<10;i++){
        if(i>5){
          //使用call(..)可以确保this指向函数对象foo本身
          foo.call(foo,i);
        }
      }
      //foo:6
      //foo:7
      //foo:8
      //foo:9
      //foo被调用了多少次
      console.log(foo.count);//4
    1.2.2 它的作用域
    误解二：this指向函数的作用域，有时正确有时错误
    另外this在任何情况下都不指向函数的词法作用域
    错误示例：
      function foo(){
        var a = 2;
        this.bar();
      }
      function bar(){
        console.log(this.a);
      }
      foo();//ReferenceEror:a is not defined
    1.3 this到底是什么
  第2章 this全面解析
    每个函数的this是在调用时被绑定的，完全取决于函数的调用位置
    2.1 调用位置
    调用位置就是函数在代码中被调用的位置。
    调用栈就是为了到达当前执行位置所调用的所有函数。
    调用位置就在当前正在执行的函数的前一个调用中。
      function baz(){
        //当前调用栈是：baz
        //因此，当前调用位置是全局作用域
        console.log("baz");
        bar();//<--bar的调用位置
      }
      function bar(){
        //当前调用栈是baz -> bar
        //因此，当前调用位置在baz中
        console.log("bar");
        foo();//<-- foo的调用位置
      }
      function foo(){
        //当前调用栈是baz -> bar -> foo
        //因此，当前调用位置在bar中
        console.log("foo");
      }
      baz();//<-- baz的调用位置
    也可以使用浏览器的调试工具查看调用栈。
    就本例来说，可以在工具中给foo()函数的第一行代码设置一个断点，或者直接在第一行代码之前插入一条debugger;语句。
    2.2 绑定规则
    2.2.1 默认规则
    最常用的函数调用类型：独立函数调用
    可以把这条规则看作是无法应用其他规则时的默认规则。
      function foo)(){
        console.log(this.a);
      }
      var a = 2;
      foo();//2
    声明在全局作用域中的变量就是全局对象的一个同名属性。
    本例中，函数调用时应用了this的默认绑定，因此this指向全局对象。
    如果使用严格模式（strict mode），那么全局对象将无法使用默认绑定，因此this会绑定到undefined:
      function foo(){
        "use strict";
        console.log(this.a);
      }
      var a = 2;
      foo();//TypeError:this is undefined
    虽然this的绑定规则完全取决于调用位置，但是只有foo()运行在非strict mode下时，默认绑定才能绑定到全局对象；严格模式下与foo()的调用位置无关：
      function foo(){
        console.log(this.a);
      }
      var a = 2;
      (function(){
        "use strict";
        foo();//2
      })();
    通常来说你不应该在代码中混合使用strict mode和non-strict mode。然而有时候你可能会用到第三方库，其严格程度和你的代码有所不同，因此一定要注意这类兼容性细节。
    2.2.2 隐式绑定
    这条规则是调用位置是否有上下文对象
      function foo(){
        console.log(this.a);
      }
      var obj = {
        a:2,
        foo:foo
      };
      obj.foo();//2
    当函数引用有上下文对象时，隐式绑定会把函数调用中的this绑定到这个上下文对象。
    对象属性引用链中只有最顶层或者说最后一层会影响调用位置。
      function foo(){
        console.log(this.a);
      }
      var obj2 = {
        a:42,
        foo:foo
      };
      var obj1 = {
        a:2,
        obj2:obj2
      };
      obj1.obj2.foo();//42
    隐式丢失
    被隐式绑定的函数丢失绑定对象，应用默认绑定
      function foo(){
        console.log(this.a);
      }
      var obj = {
        a:2,
        foo:foo
      };
      var bar = obj.foo;//函数别名！
      var a = "oops,global";//a是全局对象的属性
      bar();//"oops,global";
    bar引用的是foo函数本身
    回调函数中：
      function foo(){
        console.log(this.a);
      }
      function doFoo(fn){
        //fn其实引用的是foo
        fn();//<--调用位置！
      }
      var obj = {
        a:2,
        foo:foo
      };
      var a = "oops,global";//a是全局对象的属性
      doFoo(obj.foo);//"oops,global"
    参数传递就是一种隐式赋值。如果把函数传入语言内置的函数结果是一样的。
      function foo(){
        console.log(this.a);
      }
      var obj = {
        a:2,
        foo:foo
      };
      var a = "oops.global";//a是全局对象的属性
      setTimeout(obj.foo,100);//"oops,global"
    JavaScript环境中内置的setTimeout()函数实现和下面的伪代码类似：
      function setTimeout(fn,delay){
        //等待delay毫秒
        fn();//<--调用位置！
      }
    调用回调函数的函数还可能会修改this
    2.2.3 显示绑定
    使用函数的call(..)和apply(..)方法。他们的第一个参数是一个对象，他们会把这个对象绑定到this.
      function foo(){
        console.log(this.a);
      }
      var obj = {
        a:2
      };
      foo.call(obj);//2
    如果你传入一个原始值来当作this的绑定对象，这个原始值会被转换成它的对象形式。这通常被称为“装箱”。
    1.硬绑定
      function foo(){
        console.log(this.a);
      }
      var obj = {
        a:2
      };
      var bar = function(){
        foo.call(obj);
      };
      bar();//2
      setTimeout(bar,100);//2
      //硬绑定的bar不可能在修改它的this
      bar.call(window);//2

      function foo(something){
        console.log(this.a,something);
        return this.a + something;
      }
      var obj = {
        a:2
      };
      var bar = function (){
        return foo.apply(obj,arguments);
      };
      var b = bar(3);//2 3
      console.log(b);//5

      function foo(something){
        console.log(this.a,something);
        return this.a + something;
      }
      //简单的辅助绑定函数
      function bind(fn,obj){
        return function(){
          return fn.apply(obj,arguments);
        };
      }
      var obj ={
        a:2
      };
      var bar = bind(foo,obj);
      var b = bar(3);//2 3
      console.log(b);//5
    ES5中提供了内置的方法Function.prototype.bind：
      function foo(something){
        console.log(this.a,something);
        return this.a + something;
      }
      var obj = {
        a:2
      };
      var bar = foo.bind(obj);
      var b = bar(3);//2 3
      console.log(b);//5
    bind(..)会返回一个硬编码的新函数，他会把参数设置为this的上下文并调用原始函数。
    2.API调用的“上下文”
      function foo(el){
        console.log(el,this.id);
      }
      var obj = {
        id:"awesome"
      };
      //调用foo(..)时把this绑定到obj
      [1,2,3],forEach(foo,obj);
      //1 awesome 2 awesome 3 awesome
    2.2.4 new绑定
    使用new来调用函数时，会自动执行下面的操作。
    1.创建（或者说构造）一个全新的对象。
    2.这个新对象会被执行[[原型]]连接。
    3.这个新对象会绑定到函数调用的this。
    4.如果函数没返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。
      function foo(a){
        this.a = a;
      }
      var bar = new foo(2);
      console.log(bar.a);//2
    new是最后一种可以影响函数调用时this绑定行为的方法，我们称之为new绑定。
    2.3 优先级
    显示绑定比隐式绑定优先级高：
      function foo(){
        console.log(this.a);
      }
      var obj1 = {
        a:2,
        foo:foo
      };
      var obj2 = {
        a:3,
        foo:foo
      };
      obj1.foo();//2
      obj2.foo();//3
      obj1.foo.call(obj2);//3
      obj2.foo.call(obj1);//2
    new绑定比隐式绑定优先级高：
      function foo(something){
        this.a = something;
      }
      var obj1 = {
        foo:foo
      };
      var obj2 = {};
      obj1.foo(2);
      console.log(obj1.a);//2
      obj1.foo.call(obj2,3);
      console.log(obj2.a);//3
      var bar = new obj1.foo(4);
      console.log(obj1.a);//2
      console.log(bar.a);//4
    new绑定比显式绑定优先级高(new绑定比硬绑定优先级高，硬绑定比显式绑定优先级高)
      function foo(something){
        this.a = something;
      }
      var obj1 = {};
      var bar = foo.bind(obj1);
      bar(2);
      console.log(obj1.a);//2
      var baz = new bar(3);
      console.log(obj1.a);//2
      console.log(baz.a);//3
    new中使用硬绑定可以传递参数，使用new时bind(..)中的参数只有第一个用于绑定this的参数会被忽略
      function foo(p1,p2){
        this.val = p1 + p2;
      }
      //之所以使用null是因为在本例中我们并不关心硬绑定的this是什么，反正使用new时this会被修改
      var bar = foo.bind(null,"p1");
      var baz = new bar("p2");
      baz.val;//p1p2
    判断this
    1.函数是否在new中调用（new绑定）？如果是的话this绑定的是新创建的对象。
      var bar = new foo()
    2.函数是否是通过call、apply（显示绑定）或者硬绑定调用？如果是的话，this绑定的是指定的对象。
      var bar = foo.call(obj2)
    3.函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，this绑定的是那个上下文对象。
      var bar = obj1.foo()
    4.如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到undefined，否则绑定到全局对象。
      var bar = foo()
    2.4 绑定例外
    2.4.1 被忽略的this
    如果把null或undefined作为this的绑定对象传入call、apply、或者bind，这些值在调用时会被忽略，实际应用的是默认绑定规则：
      function foo(){
        console.log(this.a);
      }
      var a = 2;
      foo.call(null);//2
    使用apply(..)来“展开”一个数组，并当作参数传入一个函数。或使用bind(..)对参数进行柯里化（预先设置一些参数）。
    都需要传入一个参数当作this的绑定对象。如果函数不关心this的话，可以传入null占位。
      function foo(a,b){
        console.log("a:" + a + ",b" +b);
      }
      //把数组“展开”成参数
      foo.apply(null,[2,3]);//a:2,b:3
      //使用bind(..)进行柯里化
      var bar = foo.bind(null,2);
      bar(3);//a:2,b:3
    ES6中...操作符也可以“展开”数组，foo(...[1,2])和foo(1,2)是一样的。
    总使用null来忽略this绑定可能产生副作用。如果某个函数确实使用了this，那默认绑定规则会把this绑定到全局对象，这将导致不可预计的后果。
    一种“更安全”的做法是传入一个特殊的对象，把this绑定到这个对象不会对你的程序产生任何副作用————他就是一个空的非委托对象。
      function foo(a,b){
        console.log("a:" + a + ",b:" + b);
      }
      //我们的DMZ空对象
      var φ = Object.create(null);
      //把数组展开成参数
      foo.apply(φ,[2,3]);//a:2,b:3
      //使用bind(..)进行柯里化
      var bar = foo.bind(φ,2);
      bar(3);//a:2,b:3
    2.4.2 间接引用
      function foo(){
        console.log(this.a);
      }
      var a = 2;
      var o = {a:3,foo:foo};
      var p = {a:4};
      o.foo();//3
      (p.foo = o.foo)();//2
    赋值表达式p.foo = o.foo的返回值是目标函数的引用，因此调用位置是foo()而不是p.foo()或者o.foo()。这里会应用默认绑定
    2.4.3 软绑定
      if(!Function.prototype.softBind){
        Function.prototype.softBind = function(obj){
          var fn = this;
          //捕获所有curried参数
          var curried = [].slice.call(arguments,1);
          var bound = function(){
            return fn.apply(
              (!this||this ===(window||global))?obj:this，curried.concat.apply(curried,arguments)
            );
          };
          bound.prototype = Object.create(fn.prototype);
          return bound;
        };
      }

      function foo(){
        console.log("name:" + this.name);
      }
      var obj = {name:"obj"},
        obj2 = {name:"obj2"},
        obj3 = {name:"obj3"};
      var fooOBJ = foo.softBind(obj);
      fooOBJ();//name:obj
      obj2.foo = foo.softBind(obj);
      obj2.foo();//name:obj2<----看！！！
      fooOBJ.call(obj3);//name:obj3<---看！
      setTimeout(obj2.foo,10);//name:obj<---应用了软绑定
    软绑定优先级高于默认规则，低于隐式绑定、显示绑定、new绑定
    2.5 this词法
    ES6中，箭头函数不使用this的四种标准规则，而是根据外层作用域来决定this。
      function foo(){
        //返回一个箭头函数
        return (a) => {
          //this继承自foo()
          console.log(this.a);
        };
      }
      var obj1 = {a:2};
      var obj2 = {a:3};
      var bar = foo.call(obj1);
      bar.call(obj2);//2,不是3
    箭头函数常用于回调函数中：
      function foo(){
        setTimeout(()=>{
          //这里的this在词法上继承自foo()
          console.log(this.a);
        },100);
      }
      var obj = {a:2};
      foo.call(obj);//2
    类似于ES6之前的：
      function foo(){
        var self = this;
        setTimeout(function(){
          console.log(self.a);
        },100);
      }
      var obj = {a:2};
      foo.call(obj);//2
  第三章 对象
    3.1 语法
    对象可以通过两种形式定义：声明（文字）形式和构造形式
    对象的文字语法大概是这样：
      var myObj = {
        key: value
        //...
      };
    一般使用文字语法
    构造形式大概是这样：
      var myObj = new Object();
      myObj.kdy = value;
    3.2 类型
    在JavaScript中一共有六种主要类型：string,number,boolean,null,undefined,object
    前五种是简单基本类型，本身不是对象。
    函数，数组都是对象的子类型
    内置对象：String,Number,Boolean,Object,Function,Array,Date,RegExp,Error
    他们实际是一些内置函数，可以当作构造函数来使用。
    3.3 内容
    通过.操作符或者[]操作符访问对象某个属性的值。
      var myObject = {a:2};
      myObject.a;//2
      myObject["a"];//2
    .a语法通常被称为“属性访问”，["a"]语法通常被称为“键访问”。实际访问的是同一个位置。
    这两种语法的主要区别在于.操作符要求属性名满足标识符的命名规范，而[".."]语法可以接受任意UTF-8/Unicode字符串作为属性名。
    此外由于[".."]语法使用字符串来访问属性，所以可以在程序中构造这个字符串
      var myObject = {
        a:2
      };
      var idx;
      if(wantA){
        idx = "a";
      }
      //之后
      console.log(myObject[idx]);//2
    3.3.1 可计算属性名
    使用[..]这种属性访问语法可以通过表达式来计算属性名。但是使用文字形式来声明对象时这么做是不行的。
    ES6增加了可计算属性名，可以在文字形式中使用[]包裹一个表达式来当作属性名：
      var prefix = "foo";
      var myObject = {
        [prefix + "bar"]:"hello",
        [prefix + "baz"]:"world"
      };
      myObject["foobar"];//hello
      myObject["foobaz"];//world
    3.3.2 属性与方法
    3.3.3 数组
    3.3.4 复制对象
      function anotherFunction(){/*..*/}
      var anotherObject = {c:true};
      var anotherArray = [];
      var myObject = {
        a:2,
        b:anotherObject,//引用，不是复本
        c:anotherArray,//另一个引用
        d:anotherFunction
      };
      anotherArray.push(anotherObject,myObject)
    对于JSON安全的对象：
      var newObj = JSON.parse(JSON.stringify(someObj))
    ES6定义了Object.assign(..)方法来实现浅复制。其第一个参数是目标对象，之后还可以跟一个或多个源对象。
    它会遍历一个或多个源对象的所有可枚举的自有键并把它们复制（使用=操作符赋值）到目标对象，最后返回目标对象：
      var newObj = Object.assign({},myObject);
      newObj.a;//2
      newObj.b===anotherObject;//true
      newObj.c===anotherArray;//true
      newObj.d===anotherFunction;//true
    3.3.5








中卷
第三部分 类型和语法

第四部分 异步和性能

下卷
第五部分 起步上路

第六部分 ES6及更新版本