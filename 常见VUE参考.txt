目录
  语法
  API
  过渡
    全局配置
    全局API
    选项
    实例属性和方法
    指令
    特殊特性
    内置组件


语法
  Vue.config.全局配置
  全局API

  let vm =new Vue({
    选项/数据:选项值，
    选项/DOM:选项值，
    选项/生命周期钩子:函数，//在实例的对应生命周期执行函数
    选项/资源:选项值，
    选项/组合:选项值，
    选项/其他:选项值
  })

  vm.实例属性；
  vm.实例方法/数据();
  vm.实例方法/事件();
  vm.实例方法/生命周期();

  <div 指令></div>
  <div 指令=值></div>
  <div 指令:参数=值></div>
  <div 指令:参数.修饰符=值></div>

  <div 特殊特性=特性值></div>

  <内置组件></内置组件>

  选项/数据
    data
    computed 计算属性
      { [key: string]: Function | { get: Function, set: Function } }
    methods 方法
      { [key: string]: Function }
    watch 侦听属性


过渡
在进入/离开的过渡中，会有 6 个 class 切换。
  v-enter：定义进入过渡的开始状态。
  v-enter-active：定义进入过渡生效时的状态。
  v-enter-to：定义进入过渡的结束状态。
  v-leave：定义离开过渡的开始状态。
  v-leave-active：定义离开过渡生效时的状态。
  v-leave-to：定义离开过渡的结束状态。

  过渡：
  操作              点击                                      点击
  类名所在时间  隐藏时间 |延迟时间|     过渡时间   |增加的时间|显示时间|延迟时间|         过渡时间       |增加的时间|  隐藏时间
  被添加的类名 --- none | enter | enter-to  -->  enter-to | none --- none | leave-to      -->      leave-to | none ---
  被添加的类名 --- none | enter-active  ---  enter-active | none --- none | leave-active  -->  leave-active | none ---
  元素状态      静态  突|变 静态 |    持续变化    |  静态  突|变   静态       |         持续变化      |  静态  突|变  静态

  定义类：enter-active;enter;leave-active;

  过渡是enter/none时刻的样式过渡到处于enter-to/leave-to时刻元素所拥有的样式

自定义过渡的类名
  enter-class
  enter-active-class
  enter-to-class
  leave-class
  leave-active-class
  leave-to-class


API
全局配置
  silent
  optionMergeStrategies
  devtools
  errorHandler
  warnHandler
  ignoredElements
  keyCodes
  performance
  productionTip
全局API
  Vue.extend
  Vue.nextTick
  Vue.set
  Vue.delete
  Vue.directive
  Vue.filter
  Vue.component( id, [definition] )：注册或获取全局组件。
  Vue.use
  Vue.mixin
  Vue.compile
  Vue.observable
  Vue.version



选项
数据
  data：Object | Function：Vue 实例的数据对象
  props：Array<string> | Object：组件的自定义特性，接收来自父组件的数据。
  propsData
  computed：{ [key: string]: Function | { get: Function, set: Function } }：
  methods：{ [key: string]: Function }：
  watch
DOM
  el
  tmplate
  render
  renderError
生命周期钩子
  beforeCreate
  created
  beforeMount
  mounted
  beforeUpdata
  updated
  activated
  deactivated
  beforeDestroy
  destroyed
  errorCaptured
资源
  directives
  filters
  components：Object：包含 Vue 实例可用组件的哈希表。
组合
  parent
  mixins
  extends
  provide / inject
其它
  name
  delimiters
  functional
  model：{ prop?: string, event?: string }：允许一个自定义组件在使用 v-model 时定制 prop 和 event。
  inheritAttrs：boolean：默认false：父作用域的不被认作 props 的特性绑定是否将会“回退”且作为普通的 HTML 特性应用在子组件的根元素上。
  comments


实例属性和方法
实例属性
  vm.$data
  vm.$props
  vm.$el
  vm.$options
  vm.$parent：Vue instance：当前实例的父实例
  vm.$root：Vue instance：当前组件树的根 Vue 实例。
  vm.$children
  vm.$slots
  vm.$scopedSlots
  vm.$refs
  vm.$isServer
  vm.$attrs：{ [key: string]: string }：只读：包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定(class 和 style 除外)。
  vm.$listeners
实例方法 / 数据
  vm.$watch
  vm.$set
  vm.$delete
实例方法 / 事件
  vm.$on( event, callback )：监听当前实例上的自定义事件。
  vm.$once
  vm.$off
  vm.$emit( eventName, […args] )：触发当前实例上的事件。
实例方法 / 生命周期
  vm.$mount
  vm.$forceUpdate
  vm.$nextTick
  vm.$destroy


指令
  v-text：更新元素的textContent
  v-html：更新元素的 innerHTML
  v-show：条件渲染，根据表达式之真假值，切换元素的CSS display属性。当条件变化时该指令触发过渡效果
  v-if:条件渲染，根据表达式的值的真假条件渲染元素。当条件变化时该指令触发过渡效果。
  v-else：
  v-else-if：
  v-for：列表渲染，基于源数据多次渲染元素或模板块。
  v-on：@，绑定事件监听器。
    .stop：调用 event.stopPropagation()。
    .prevent：调用 event.preventDefault()。
    .capture：添加事件侦听器时使用 capture 模式。
    .self：只当事件是从侦听器绑定的元素本身触发时才触发回调。
    .{keyCode | keyAlias}：只当事件是从特定键触发时才触发回调。
    .native：监听组件根元素的原生事件。
    .once：只触发一次回调。
    .left：(2.2.0) 只当点击鼠标左键时触发。
    .right：(2.2.0) 只当点击鼠标右键时触发。
    .middle：(2.2.0) 只当点击鼠标中键时触发。
    .passive：(2.3.0) 以 { passive: true } 模式添加侦听器
  v-bind：:，动态地绑定一个或多个特性，或一个组件 prop 到表达式。
    .prop：被用于绑定 DOM 属性 (property)。(差别在哪里？)
    .camel：(2.1.0+) 将 kebab-case 特性名转换为 camelCase. (从 2.1.0 开始支持)
    .sync (2.3.0+) 语法糖，会扩展成一个更新父组件绑定值的 v-on 侦听器。
  v-model：在表单控件或者组件上创建双向绑定。
    .lazy：取代 input 监听 change 事件
    .number：输入字符串转为有效的数字
    .trim：输入首尾空格过滤
    表单类型：
      text和textarea元素：绑定value属性，input事件
      checkbox和radio：绑定checked属性，change事件
      select：绑定prop，change事件
  v-slot：#，提供具名插槽或需要接收 prop 的插槽。
  v-pre：跳过这个元素和它的子元素的编译过程。可用于优化
  v-cloak：这个指令保持在元素上直到关联实例结束编译。
  v-once：只渲染元素和组件一次。可用于优化


特殊特性
  key
  ref
  is
  slot：自2.6.0起被废弃
  slot-scope：自2.6.0起被废弃
  scope：移除


内置组件
  component
  transition：
    Props
      name
      appear
      css
      type
      mode
      duration
      enter-class,leave-class,appear-class
      enter-to-class,leave-to-class,appear-to-class
      enter-active-class,leave-active-class,appear-active-class
    事件
      before-enter
      before-leave
      before-appear
      enter
      leave
      appear
      after-enter
      after-leave
      after-appear
      enter-cancelled
      leave-cancelled (v-show only)
      appear-cancelled

  transition-group
  keep-alive：包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。
    include：',',//,[,]
    exclude
    max：
  slot


安装Vue CLI：npm install -g @vue/cli
@vue/cli@3.8.4
  Usage: vue <command> [options]
  Options:
    -V, --version                              output the version number
    -h, --help                                 output usage information
  Commands:
    create [options] <app-name>                create a new project powered by vue-cli-service
    add [options] <plugin> [pluginOptions]     install a plugin and invoke its generator in an already created project
    invoke [options] <plugin> [pluginOptions]  invoke the generator of a plugin in an already created project
    inspect [options] [paths...]               inspect the webpack config in a project with vue-cli-service
    serve [options] [entry]                    serve a .js or .vue file in development mode with zero config
    build [options] [entry]                    build a .js or .vue file in production mode with zero config
    ui [options]                               start and open the vue-cli ui
    init [options] <template> <app-name>       generate a project from a remote template (legacy API, requires @vue/cli-init)
    config [options] [value]                   inspect and modify the config
    upgrade [semverLevel]                      upgrade vue cli service / plugins (default semverLevel: minor)
    info                                       print debugging information about your environment

    Run vue <command> --help for detailed usage of given command.

快速原型开发
vue serve和vue build需要额外安装一个全局扩展：
  npm install -g @vue/cli-service-global
vue serve
  Usage: serve [options] [entry]
  在开发环境模式下零配置为 .js 或 .vue 文件启动一个服务器
  Options:
    -o, --open  打开浏览器
    -c, --copy  将本地 URL 复制到剪切板
    -h, --help  输出用法信息
vue build：将目标文件构建成一个生产环境的包并用来部署
  Usage: build [options] [entry]
  在生产环境模式下零配置构建一个 .js 或 .vue 文件
  Options:
    -t, --target <target>  构建目标 (app | lib | wc | wc-async, 默认值：app)
    -n, --name <name>      库的名字或 Web Components 组件的名字 (默认值：入口文件名)
    -d, --dest <dir>       输出目录 (默认值：dist)
    -h, --help             输出用法信息
vue create：创建一个新项目
  用法：create [options] <app-name>
  创建一个由 `vue-cli-service` 提供支持的新项目
  选项：
    -p, --preset <presetName>       忽略提示符并使用已保存的或远程的预设选项
    -d, --default                   忽略提示符并使用默认预设选项
    -i, --inlinePreset <json>       忽略提示符并使用内联的 JSON 字符串预设选项
    -m, --packageManager <command>  在安装依赖时使用指定的 npm 客户端
    -r, --registry <url>            在安装依赖时使用指定的 npm registry
    -g, --git [message]             强制 / 跳过 git 初始化，并可选的指定初始化提交信息
    -n, --no-git                    跳过 git 初始化
    -f, --force                     覆写目标目录可能存在的配置
    -c, --clone                     使用 git clone 获取远程预设选项
    -x, --proxy                     使用指定的代理创建项目
    -b, --bare                      创建项目时省略默认组件中的新手指导信息
    -h, --help                      输出使用帮助信息
vue ui：打开一个浏览器窗口，并以图形化界面将你引导至项目创建的流程。
vue add：安装vue cli插件