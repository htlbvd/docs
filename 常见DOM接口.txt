Node  -->  EventTarget
  以下接口都从 Node 继承其方法和属性：
  Document, Element, Attr, CharacterData (which Text, Comment, and CDATASection inherit), ProcessingInstruction, DocumentFragment, DocumentType, Notation, Entity, EntityReference
  属性
  从其父类型EventTarget继承属性。
  Node.baseURI 只读
    返回一个表示base URL的DOMString。不同语言中的base URL的概念都不一样。 在HTML中，base URL表示协议和域名，以及一直到最后一个'/'之前的文件目录
  Node.childNodes 只读
    返回一个包含了该节点所有子节点的实时的NodeList。返回值为 NodeList 类型，且为只读。
  Node.firstChild 只读
    返回该节点的第一个子节点Node，如果该节点没有子节点则返回null。
  Node.lastChild 只读
    返回该节点的最后一个子节点Node，如果该节点没有子节点则返回null。
  Node.isConneted 只读
    返回一个布尔值用来检测该节点是否已连接(直接或者间接)到一个上下文对象上，比如通常DOM情况下的Document对象，或者在shadow DOM情况下的ShadowRoot对象。
  Node.previousSibling 只读
    返回一个当前节点同辈的前一个结点( Node) ，或者返回null（如果不存在这样的一个节点的话）。
  Node.nextSibling 只读
    返回与该节点同级的下一个节点 Node，如果没有返回null
  Node.nodeName 只读
    返回一个包含该节点名字的DOMString。
    下表列出了所有类型的节点的nodeName属性的值.
    接口 	            nodeName属性值
    Attr 	        等同于 Attr.name 属性的值
    CDATASection    "#cdata-section"
    Comment         "#comment"
    Document        "#document"
    DocumentFragment    "#document-fragment"
    DocumentType    等同于 DocumentType.name 属性的值
    Element 	      等同于 Element.tagName 属性的值
    Entity 	        实体名称
    EntityReference 实体引用名称
    Notation       	Notation名称
    ProcessingInstruction 等同于 ProcessingInstruction.target 属性的值
    text 	          "#text"
  Node.nodeType 只读
    返回一个与该节点类型对应的无符号短整型的值
    节点类型常量
    常量 	              值 	    描述
    Node.ELEMENT_NODE 	1 	一个 元素 节点，例如 <p> 和 <div>。
    Node.TEXT_NODE 	    3 	Element 或者 Attr 中实际的  文字
    Node.PROCESSING_INSTRUCTION_NODE 	7 	一个用于XML文档的 ProcessingInstruction ，例如 <?xml-stylesheet ... ?> 声明。
    Node.COMMENT_NODE 	8 	一个 Comment 节点。
    Node.DOCUMENT_NODE 	9 	一个 Document 节点。
    Node.DOCUMENT_TYPE_NODE 	        10 	描述文档类型的 DocumentType 节点。例如 <!DOCTYPE html>  就是用于 HTML5 的。
    Node.DOCUMENT_FRAGMENT_NODE 	    11 	一个 DocumentFragment 节点
  Node.node
    返回或设置当前节点的值。
    如果node的值为null,则对它赋值也不会有任何效果.
    下表就是不同类型的节点所返回的该属性的值.
    Attr 	该属性的属性值
    CDATASection 	    CDATA的文本内容
    Comment         	注释的文本内容
    Document 	        null
    DocumentFragment 	null
    DocumentType    	null
    Element         	null
    NamedNodeMap    	null
    EntityReference 	null
    Notation         	null
    ProcessingInstruction 	整个标签的文本内容
    Text             	文本节点的内容
  Node.ownerDocument 只读
    返回这个元素属于的 Document对象 。 如果没有Document对象与之关联，返回null
    被此属性返回的 document 对象是在实际的HTML文档中的所有子节点所属的主对象。如果在文档节点自身上使用此属性，则结果是null。
  Node.parentNode 只读
    返回一个当前结点 Node的父节点 。
    一个元素节点的父节点可能是一个元素(Element )节点,也可能是一个文档(Document )节点,或者是个文档碎片(DocumentFragment)节点.
    对于下面的节点类型: Attr, Document, DocumentFragment, Entity, Notation,其parentNode属性返回null.
    如果当前节点刚刚被建立,还没有被插入到DOM树中,则该节点的parentNode属性也返回null.
  Node.parentElement 只读
    返回一个当前节点的父节点 Element 。 如果当前节点没有父节点或者说父节点不是一个元素(Element), 这个属性返回null。
  Node.textContent
    返回或设置一个元素内所有子结点及其后代的文本内容。
    如果 element 是 Document，DocumentType 或者 Notation 类型节点，则 textContent 返回 null。如果你要获取整个文档的文本以及CDATA数据，可以使用 document.documentElement.textContent。
    如果节点是个CDATA片段，注释，ProcessingInstruction节点或一个文本节点，textContent 返回节点内部的文本内容（即 node）。
    对于其他节点类型，textContent 将所有子节点的 textContent 合并后返回，除了注释、ProcessingInstruction节点。如果该节点没有子节点的话，返回一个空字符串。
    在节点上设置 textContent 属性的话，会删除它的所有子节点，并替换为一个具有给定值的文本节点。
  方法
  从其父类型 EventTarget继承方法
  Node.appendChild()
    将指定的 childNode 参数作为最后一个子节点添加到当前节点。
    var child = node.appendChild(child);
    node 是要插入子节点的父节点.
    child 即是参数又是这个方法的返回值
    返回要插入的这个节点
    如果被插入的节点已经存在于当前文档的文档树中,则那个节点会首先从原先的位置移除,然后再插入到新的位置.
    这个方法只能将某个子节点插入到同一个文档的其他位置,如果你想跨文档插入,你需要先调用document.importNode方法
  Node.cloneNode()
    返回调用该方法的节点的一个副本.
    语法
    var dupNode = node.cloneNode(deep);
    node  将要被克隆的节点
    dupNode 克隆生成的副本节点
    deep 可选 是否采用深度克隆,如果为true,则该节点的所有后代节点也都会被克隆,如果为false,则只克隆该节点本身. 
      DOM4中默认true,现在默认false。所以应该总是设置其值。
    在使用Node.appendChild()或其他类似的方法将拷贝的节点添加到文档中之前,那个拷贝节点并不属于当前文档树的一部分,也就是说,它没有父节点.
    如果原始节点设置了ID，并且克隆节点会被插入到相同的文档中，那么应该更新克隆节点的ID以保证唯一性。name属性可能也需要进行修改，取决于你是否希望有相同名称的节点存在于文档中。
    想要克隆一个节点来添加到另外一个文档中,请使用Document.importNode()代替本方法.
  Node.compareDocumentPosition() 
    比较当前节点与任意文档中的另一个节点的位置关系。
    语法
    compareMask = node.compareDocumentPosition( otherNode )
    参数
    otherNode  用于比较位置的 Node 
    返回值是一个具有以下值的位掩码：
    常量名 	十进制值 	含义
    DOCUMENT_POSITION_DISCONNECTED 	1 	不在同一文档中
    DOCUMENT_POSITION_PRECEDING 	2 	otherNode在node之前
    DOCUMENT_POSITION_FOLLOWING 	4 	otherNode在node之后
    DOCUMENT_POSITION_CONTAINS 	8 	otherNode包含node
    DOCUMENT_POSITION_CONTAINED_BY 	16 	otherNode被node包含
    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC 	32 	待定
  Node.contains()
    返回一个 Boolean 布尔值，来表示传入的节点是否为该节点的后代节点。
    node.contains( otherNode ) 
  Node.getRootNode()
    属性返回上下文的根节点。实验性
  Node.hasChildNodes()
    返回一个布尔值,表明当前节点是否包含有子节点.
  Node.insertBefore()
    方法在参考节点之前插入一个拥有指定父节点的子节点。
    语法
    var insertedNode = parentNode.insertBefore(newNode, referenceNode);
    insertedNode 已经经过插入newNode的新的节点
    parentNode 新插入节点的父节点
    newNode 用于插入的节点
    referenceNode newNode将要插在这个节点之前
    如果referenceElement为null则newNode将被插入到子节点的末尾
    返回被插入过的子节点；当newNode 是DocumentFragment时，返回空DocumentFragment。
  Node.isDefaultNamespace()
    接受一个命名空间URI作为参数,如果该命名空间是当前节点的默认命名空间,则返回true,否则返回false
  Node.isEqualNode()
    方法可以判断两个节点是否相等。当两个节点的类型相同，定义特征(defining characteristics)相同（对元素来说，即 id，孩子节点的数量等等），属性一致等，这两个节点就是相等的。一些具体的数据指出：多数时候的比较是根据节点的类型来的。
    var isEqualNode = node.isEqualNode(otherNode);
  Node.lookupPrefix()
    返回一个和指定命名空间URI绑定的命名空间前缀.如果没有,返回null. 如果有多个绑定的前缀, 返回的结果根据浏览器实现而定.
  Node.lookupNamespaceURI()
    返回当前节点上与指定命名空间前缀绑定的命名空间URI,如果没有,返回null,如果参数为null,返回默认的命名空间.
  Node.normalize()
    方法将当前节点和它的后代节点”规范化“（normalized）。在一个"规范化"后的DOM树中，不存在一个空的文本节点，或者两个相邻的文本节点。
  Node.removeChild()
    方法从DOM中删除一个子节点。返回删除的节点
    let oldChild = node.removeChild(child);
    element.removeChild(child);
    child 是要移除的那个子节点.
    node 是child的父节点.
    oldChild保存对删除的子节点的引用. oldChild === child.
    被移除的这个子节点仍然存在于内存中,只是没有添加到当前文档的DOM树中,因此,你还可以把这个节点重新添加回文档中,当然,实现要用另外一个变量比如上例中的oldChild来保存这个节点的引用. 如果使用上述语法中的第二种方法, 即没有使用 oldChild 来保存对这个节点的引用, 则认为被移除的节点已经是无用的, 在短时间内将会被内存管理回收.
  Node​.replace​Child()
    用指定的节点替换当前节点的一个子节点，并返回被替换掉的节点。
    replacedNode = parentNode.replaceChild(newChild, oldChild);
    newChild 用来替换 oldChild 的新节点。如果该节点已经存在于DOM树中，则它会被从原始位置删除。
    oldChild  被替换掉的原始节点。
    replacedNode 和oldChild相等

Document  -->  Node  -->  EventTarget
  Document接口描述了任何类型文档的公共属性和方法。
  根据文档的类型（例如HTML，XML，SVG，...），可以使用更大的API：HTML文档（使用"text/html"内容类型），它也实现了HTMLDocument接口，而XML和SVG文档实现了XMLDocument接口。
  接口继承 Node 和 EventTarget 接口。
  实现ParentNode
  构造函数
  Document()
  属性
  Document.anchors  只读，已废弃
    返回文档中所有锚点元素的列表。
  Document.body
    返回当前文档中的 <body> 或 <frameset> 元素。
    该属性是可写的,且为该属性赋的值必须是一个<body>元素.
  Document.characterSet 只读
    返回当前文档的字符编码。该字符编码是用于渲染此文档的字符集，可能与该页面指定的编码不同。（用户可以重写编码方式。）
  Document.doctype 只读
    返回当前文档关联的文档类型定义（Document Type Definition (DTD) ）
    返回的对象实现了 DocumentType 接口. 
    如果当前文档没有DTD,则该属性返回null.
    在HTML文档中,如果文档有DTD,则该属性等价于document.firstChild.
  Document.documentElement 只读
    返回文档对象（document）的根元素（如HTML文档的 <html> 元素）
    当前文档的直接子节点。对于 HTML 文档，HTMLHtmlElement 对象一般代表该文档的<html> 元素。
  Document.documentURI 只读
    以字符串的类型，返回当前文档的路径。
  Document.embeds 只读
    以列表(list)的类型，返回当前文档的嵌入式的元素 <embed> 
    返回值是一个 HTMLCollection类型的值
  Document.forms 只读
    以列表(list)的类型，返回当前文档的表单的元素{ {HTMLElement("form")}} 
    返回值是一个 HTMLCollection类型的值
  Document​.head 只读
    返回当前文档中的 <head> 元素。如果有多个 <head> 元素，则返回第一个。
  Document.hidden 只读
    返回布尔值，表示页面是（true）否（false）隐藏。
  Document.images 只读
    返回当前文档<img>元素集合。
    返回值是一个  HTMLCollection类型的值
  Document.implementation 只读
    返回一个和当前文档相关联的DOMImplementation对象
  Document.lastStyleSheetSet 只读 
    返回最后一个启用的样式表集合,当document.selectedStyleSheetSet属性发生变化时,该属性的值就会变化.
  Document​.links 只读
    返回一个文档中所有具有 href 属性值的 <area> 元素与 <a> 元素的集合。
    返回值是一个 HTMLCollection类型的值
  Document.plugins 只读
    返回一个HTMLCollection 对象，该对象包含一个或多个HTMLEmbedElements表示当前文档中的<embed> 元素
  Document.scripts 只读
    返回一个HTMLCollection对象,包含了当前文档中所有<script>元素的集合
  Document​.scrolling​Element 只读
    返回滚动文档的 Element 对象的引用。 在标准模式下, 这是文档的根元素, document.documentElement.
  Document.selectedStyleSheetSet
    表示当前使用的样式表集合的名称
    返回时，currentStyleSheetSet表示当前使用的样式表集合的名称。 你也可以使用这个属性设置当前样式表集。
    设置这个属性的值相当于用currentStyleSheetSet的值调用 document.enableStyleSheetsForSet()，然后将lastStyleSheetSet 的值设置为该值。
  Document.styleSheetSets 只读 
    返回一个所有当前可用样式表集的实时列表
  Document​.visibility​State 只读
    返回document的可见性, 即当前可见元素的上下文环境. 由此可以知道当前文档(即为页面)是在背后, 或是不可见的隐藏的标签页，或者(正在)预渲染.可用的值如下：
    'visible' : 此时页面内容至少是部分可见. 即此页面在前景标签页中，并且窗口没有最小化.
    'hidden' : 此时页面对用户不可见. 即文档处于背景标签页或者窗口处于最小化状态，或者操作系统正处于 '锁屏状态' .
    'prerender' : 页面此时正在渲染中, 因此是不可见的 (considered hidden for purposes of document.hidden). 文档只能从此状态开始，永远不能从其他值变为此状态.注意: 浏览器支持是可选的.
    'unloaded' : 页面从内存中卸载清除. 注意: 浏览器支持是可选的.
    当此属性的值改变时, 会递交 visibilitychange 事件给Document.
  
  方法  此接口也继承自 Node 和 EventTarget 接口。
  Document.adoptNode()
    从其他的document文档中获取一个节点。 
    node = document.adoptNode(externalNode);
  Document.createAttribute()
    创建并返回一个新的属性节点.
    attribute = document.createAttribute(name)
    attribute 是一个属性节点.
    name 是属性节点的属性名.
  Document.createComment()
    创建并返回一个注释节点.
    var commentNode = document.createComment(data)
    commentNode 是一个注释节点.
    data 是一个字符串,包含了注释的内容.
  Document.createDocumentFragment()
    创建一个新的空白的文档片段( DocumentFragment)。
  Document.createElement()
    创建并返回由tagName 指定的HTML元素，或一个HTMLUnknownElement，如果tagName不被识别。
    let element = document.createElement(tagName[, options]);
    tagName  指定要创建元素类型的字符串
    options可选，实验性  一个可选的参数 ElementCreationOptions 是包含一个属性名为 is的对象, 该对象的值是用 customElements.define()方法定义过的一个自定义元素的标签名
  Document.createEvent()
    创建一个指定类型的事件
  Document.createNodeIterator()
    返回一个新的 NodeIterator 对象.
  Document.createProcessingInstruction()
    创建并返回一个新的处理指令节点并返回
  Document.createRange()
    返回一个Range对象
  Document.createTextNode()
    创建一个新的文本节点
    var text = document.createTextNode(data);
    text 是一个文本节点.
    data 是一个字符串,包含了放在文本节点中的内容.
  Document.createTreeWalker()
    创建并返回一个 TreeWalker 对象
  Document.getElementsByClassName()
    返回一个包含了所有指定类名的子元素的类数组对象。
  Document​.get​Elements​ByTagName()
    返回一个包括所有给定标签名称的元素的HTML集合HTMLCollection。
  Document.importNode()
    将外部文档的一个节点拷贝一份,然后可以把这个拷贝的节点插入到当前文档中.
    var node = document.importNode(externalNode, deep);
    node  导入当前文档的新节点. 新节点的 parentNode 是 null, 因为它还没有插入当前文档的文档树中,属于游离状态.
    externalNode 将要从外部文档导入的节点.
    deep 可选 一个布尔值,表明是否要导入节点的后代节点. 
    源节点不会从外部文档中删除,被导入的节点是源节点的一个拷贝.
    将外部文档的节点插入当前文档之前,你必须使用 document.importNode() 从外部文档导入源节点,或者使用 document.adoptNode()导入源节点, 




Attr -->  Node  -->  EventTarget(在DOM4将不再继承自Node。)
  该类型使用对象来表示一个DOM元素的属性。
  属性
  .name 只读
    该属性的名称
  .namespaceURI 只读
    表示该属性的命名空间URIDOMString，如果该元素不在命名空间中，则返回null。
  .localName 只读
    表示该属性的命名空间限定的本地名称DOMString。
  .prefix 只读
    表示该属性的命名空间前缀DOMString，如果没有前缀指定则返回null。
  .ownerElement 只读
    该属性所附属的元素节点
  .specified 只读
    如果这个属性你在源代码或者在脚本中明确指定的话，它总是返回真。否则它是由文档的DTD默认定义的，将总是返回假。
NonDocumentTypeChildNode
  这个接口适用于除DocumentType外有父节点的Node节点
  无法创建这个类型的对象，是通过Element,CharacterData对象实现的。
  不从任何接口继承属性和方法，也没有特有的方法
  属性
  .previousElementSibling 只读
    返回当前元素在其父元素的子元素节点中的前一个元素节点,如果该元素已经是第一个元素节点,则返回null
  .nextElementSibling 只读
    返回当前元素在其父元素的子元素节点中的后一个元素节点,如果该元素已经是最后一个元素节点,则返回null
CharacterData -->  Node  -->  EventTarget
  CharacterData 抽象接口，代表 Node 对象包含的字符。
  没有这个类型的对象。通过 Text、Comment 或 ProcessingInstruction 这些非抽象接口实现的。
  继承Node,实现ChildNode,NonDocumentTypeChildNode接口
  属性
  .data
    一个 DOMString，表示该对象中包含的文本数据。
  .length 只读
    返回一个 unsigned long 的表示 CharacterData.data 包含的字符串的大小
  方法
  .appendData()
    为 CharacterData.data 字符串追加指定的 DOMString ；当方法返回时，data 包含的是已合并的 DOMString.
  .deleteData()
    在 CharacterData.data 字符串中，从指定位置开始，删除指定数量的字符；当方法返回时，data 包含的是缩短了的 DOMString.
  .insertData()
    在 CharacterData.data 字符串中，在指定的位置，插入指定的字符；当方法返回时，data 包含的是已修改的 DOMString.
  .replaceData()
    在 CharacterData.data 字符串中，从指定位置开始，把指定数量的字符替换为指定的 DOMString; 当方法返回时, data 包含的是已修改的 DOMString.
  .substringData()
    返回一个包含了从 CharacterData.data 中的指定位置开始，指定长度的 DOMString 。
ChildNode
  接口包含特定于Node 对象的方法，这些对象可以有一个父对象。
  原始接口，并且不能创建此类型的对象；它通过Element、DocumentType 和 CharacterData 对象实现。
  没有继承来的方法和属性
  没有特定的属性
  方法
  .remove()
    将ChildNode从其父节点的子节点列表中移除
    语法  node.remove(); 
  .before() 实验
    在其父节点的子节点列表中插入一些Node或DOMString对象。插入位置为ChildNode之前。DOMString对象会被以Text的形式插入。
    语法
      [Throws, Unscopable] 
      void ChildNode.before((Node or DOMString)... nodes);
    参数 
      nodes
      一系列的 Node 或者 DOMString  
  .after() 实验
    在其父节点的子节点列表中插入一些Node或DOMString对象。插入位置为ChildNode之后。DOMString对象会被以Text的形式插入
    语法，参数与.before()相同
  .replaceWith() 实验
    使用一些Node或DOMString对象替换ChildNode 。DOMString对象会以Text的形式插入
    语法，参数与.before()相同
Comment  -->  CharacterData  -->  Node  -->  EventTarget
  代表标签（markup）之间的文本符号（textual notations）。在 HTML 和 XML 里，注释（Comments）为 '<!--' 和 '-->' 之间的内容。
  继承CharacterData,Node,EventTarget
  没有特定的属性和方法
  构造函数
  Comment() 实验
    文本内容作为参数，返回一个 Comment 对象。
    语法
    comment1 = new Comment(); // Create an empty comment
    comment2 = new Comment("This is a comment");
CustomEvent  -->  Event
  由程序创建的，可以有任意自定义功能的事件。
  继承Event
  构造函数
  CustomEvent()
    创建一个自定义事件
    语法
    event = new CustomEvent(typeArg, customEventInit);
    参数
    typeArg
      是DOMString 类型，表示所创建事件的名称。
    eventInit可选
      是一个 CustomEventInit 字典，接受以下字段:
        "detail",可选的默认值是 null 的任意类型数据，是一个与 event 相关的值
        "bubbles"，可选，Boolean类型，默认值为 false，表示该事件是否冒泡。
        "cancelable"，可选，Boolean类型，默认值为 false， 表示该事件能否被取消。
        "composed"，可选，Boolean类型，默认值为 false，指示事件是否会在影子DOM根节点之外触发侦听器
  属性
  .detail 只读
    初始化事件对象时传递过来的任何类型数据。
  方法
  .initCustomEvent() 已废弃
Domcument
  ...
DocumentFragment  -->  Node  -->  EventTarget
  文档片段接口，表示一个没有父级文件的最小文档对象
  继承Node，实现ParentNode
  没有特定的属性
  构造函数
  DocumentFragment() 实验
    返回一个新创建的 DocumentFragment 对象。
    语法  fragment = new DocumentFragment()
  方法
  .getElementById()
DocumentType --> Node --> EventTarget
  表示了一个包含文档类型的节点
  继承Node,实现ChildNode
  属性
  .name 只读
    DOMString，文档类型的名称，例：<!DOCTYPE HTML>中的“html”
  .publicId 只读
    一个DOMString，例：HTML5中的空字符串——"-//W3C//DTD HTML 4.01//EN"。
  .systemId 只读
    一个DOMString，例：HTML5中的空字符串—— "http://www.w3.org/TR/html4/strict.dtd"
DOMException
  ...
DOMImplementation
  ...
DOMString
  ...
DOMTimeStamp
  ...
DOMSettableTokenList
  ...
DOMTokenList
  ...
Element -->  Node  -->  EventTarget
  Element是非常通用的基类，所有 Document对象下的对象都继承它. 这个接口描述了所有相同种类的元素所普遍具有的方法和属性。 这些继承自Element并且增加了一些额外功能的接口描述了具体的行为. 
  继承Node,EventTarget,实现ParentNode, ChildNode, NonDocumentTypeChildNode, 和Animatable.
  ...
Event
  ...
EventTarget
  是一个由可以接收事件的对象实现的接口，并且可以为它们创建侦听器。
  构造函数
  EventTarget()
    创建一个新的 EventTarget 对象实例。
  方法
  .addEventListener()
    将指定的监听器注册到 EventTarget 上，当该对象触发指定的事件时，指定的回调函数就会被执行
    语法
    target.addEventListener(type, listener[, options]);
    target.addEventListener(type, listener[, useCapture]);
    参数
    type
      表示监听事件类型的字符串
    listener
      当所监听的事件类型触发时，会接收到一个事件通知（实现了 Event 接口的对象）对象.listener 必须是一个实现了 EventListener 接口的对象，或者是一个函数。
    options 可选
      一个指定有关 listener 属性的可选参数对象。可用的选项如下：
      capture:  Boolean，表示 listener 会在该类型的事件捕获阶段传播到该 EventTarget 时触发。
      once:  Boolean，表示 listener 在添加之后最多只调用一次。如果是 true， listener 会在其被调用之后自动移除。
      passive: Boolean，设置为true时，表示 listener 永远不会调用 preventDefault()。如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告。
    useCapter 可选
      Boolean，在DOM树中，注册了listener的元素， 是否要先于它下面的EventTarget，调用该listener。 当userCapture(设为true) 时，沿着DOM树向上冒泡的事件，不会触发listener。当一个元素嵌套了另一个元素，并且两个元素都对同一事件注册了一个处理函数时，所发生的事件冒泡和事件捕获是两种不同的事件传播方式。事件传播模式决定了元素以哪个顺序接收事件。进一步的解释可以查看 事件流 及 JavaScript Event order 文档。 如果没有指定， useCapture 默认为 false 。
    返回值 undefined
  .removeEventListener()
    删除使用 EventTarget.addEventListener() 方法添加的事件。
    语法
    target.removeEventListener(type, listener[, options]);
    target.removeEventListener(type, listener[, useCapture]);
    参数
    type
      一个字符串，表示需要移除的事件类型
    listener
      需要移除的 EventListener 函数（先前使用 addEventListener 方法定义的）。
    options 可选
      一个可选择的对象：指定有关事件侦听器的特征。可选项有：
      capture : 一个 Boolean 表示这个类型的事件将会被派遣到已经注册的侦听器，然后再派遣到DOM树中它下面的任何 EventTarget。
    useCapture 可选
      指定需要移除的 EventListener 函数是否为事件捕获。如果无此参数，默认值为 false。
      如果同一个监听事件分别为“事件捕获”和“事件冒泡”注册了一次，一共两次，这两次事件需要分别移除。两者不会互相干扰。
    返回值 undefined
    一个 EventTarget 上的 EventListener 被移除之后，如果此事件正在执行，会立即停止
  .dispatchEvent()
    将事件分派到此EventTarget。
    语法 cancelled = !target.dispatchEvent(event)
    参数
    event 是要被派发的事件对象。
    target 被用来初始化 事件 和 决定将会触发 目标.
    返回值
    当该事件是可取消的(cancleable为true)并且至少一个该事件的 事件处理方法 调用了Event.preventDefault()，则返回值为false；否则返回true。
HTMLCollection
  表示一个包含了元素（元素顺序为文档流中的顺序）的通用集合（generic collection）
  HTML DOM 中的 HTMLCollection 是即时更新的（live）；当其所包含的文档结构发生改变时，它会自动更新。
  属性
  .length 只读
    返回集合当中子元素的数目。
  方法
  .item()
    根据给定的索引（从0开始），返回具体的节点。
    语法
    var element = HTMLCollection.item(index)
    参数
    index
    想要被返回的Node的位置. 元素在HTML Collection中的顺序和他们在源文档的顺序保持一致。
    返回值
    指定的index的Node , 如果index小于0或者不小于它的长度属性则返回null。
  namedItme()
    根据 Id 返回指定节点，或者作为备用，根据字符串所表示的 name 属性来匹配。根据 name 匹配只能作为最后的依赖，并且只有当被引用的元素支持 name 属性时才能被匹配。如果不存在符合给定 name 的节点，则返回 null。
MutationObserver
  ...
MutationRecord
  ...
Node
  ...
NodeFilter
  ...
NodeIterator
  ...
NodeList
  NodeList 对象是一个节点的集合，是由 Node.childNodes 和 document.querySelectorAll 返回的.
  Node.childNodes 是实时的，如果文档中的节点树发生变化，则已经存在的实时 NodeList 对象也会随之变化。
  在其他情况下，NodeList 是一个静态集合，也就意味着随后对文档对象模型的任何改动都不会影响集合的内容。比如document.querySelectorAll 就会返回一个静态的 NodeList。
  属性
  .length
    NodeList 中包含的节点个数,是个整数
  方法
  .item()
    返回 NodeList 对象中指定索引的节点，如果索引越界，则返回null。等价的写法是 nodeList[i]，不过，在这种情况下，越界访问将返回 undefined。
    语法
    nodeItem = nodeList.item(index)
    参数
    nodeList是一个NodeList对象.通常是由某个DOM属性或方法返回的,比如childNodes.
    index 是给定的索引. 从0开始.
    nodeItem 是根据索引index由item方法从nodeList中获取到的节点.
  .entries()
    ...
  .forEach()
    ...
  .keys()
    ...
  .values()
    ...
ParentNode
  拥有子项的所有类型的 Node对象
  ParentNode 是一个原始接口，不能够创建这种类型的对象；它在 Element、Document 和 DocumentFragment 对象上被实现。
  属性
  .children 只读
    返回 一个Node的子elements ，是一个动态更新的 HTMLCollection。
  .fristElementChild 只读
    返回父节点的第一个Element后代，没有时候返回null其他类型
  .lastElementChild 只读
    返回父节点的最后一个Element后代，没有时返回null
  .childElementCount 只读
    返回一个无符号长整型，表示给定元素的子元素数。
  方法
  .append() 实验
    ParentNode的最后一个子节点之后插入一组 Node 对象或 DOMString 对象。
    被插入的 DOMString 对象等价为 Text 节点。
    语法
    [Throws, Unscopable] 
    void ParentNode.append((Node or DOMString)... nodes);
    nodes  一组要插入的 Node 或 DOMString 对象。 
    与 Node.appendChild() 的差异：
    ParentNode.append()允许追加  DOMString 对象，而 Node.appendChild() 只接受 Node 对象。
    ParentNode.append() 没有返回值，而 Node.appendChild() 返回追加的 Node 对象。
    ParentNode.append() 可以追加几个节点和字符串，而 Node.appendChild() 只能追加一个节点。
  .prepend() 实验
    父节点的第一个子节点之前插入一系列Node对象或者DOMString对象。DOMString会被当作Text节点对待
    语法 ParentNode.prepend((Node or DOMString)... nodes);
    参数 nodes    要插入的一系列Node或者DOMString。
    返回值 undefined.
  .querySelector()
    返回一个 Element 表示与指定的选择器组匹配的第一个元素，这些选择器是调用该方法的对象的后代。
    ...
  .querySelectorAll()
    ...
ProcessingInstruction
  ...
Promise
  ...
PromiseResolver
  ...
Range
  ...
Text --> CharacterData --> Node --> EventTarget
  ...
TreeWalker
  ...
URL 实验
  ...
Window
  ...
Worker
  ...
XMLDocument 实验
  ...



HTML接口
HTMLDocument
  ...
HTMLElement
  ...
HTMLHtml​Element
  ...
...
...




继承，只能是单线的，比如只能继承一个父级接口，以及父级的一个父级接口...
实现，可以实现多个接口


接口：
描述
继承
实现
构造函数

属性：
  名称
  兼容性
  可读写
  描述：返回
  返回值类型
  （其他注意事项）

方法：
  名称
  兼容性
  语法
  参数
  描述：行为及返回
  返回值类型
  （其他注意事项）
